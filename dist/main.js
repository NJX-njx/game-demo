class k{constructor(t,e){this.canvas=e,this.container=t,this.isCapture=!1,this.ratio=this.canvas.width/this.container.clientWidth,this.x=0,this.y=0,this.prevX=0,this.prevY=0,this.left=!1,this.right=!1,this.clickable=!1,this.container.addEventListener("click",()=>this.capture()),this.container.addEventListener("mousemove",i=>this.move(i)),this.container.addEventListener("mousedown",i=>this.mouseDown(i)),this.container.addEventListener("mouseup",i=>this.mouseUp(i)),document.addEventListener("pointerlockchange",()=>this.uncapture()),document.addEventListener("visibilitychange",()=>this.blur())}async capture(){this.isCapture||(await this.container.requestPointerLock({unadjustedMovement:!1}),this.isCapture=!0,setTimeout(()=>{this.clickable=!0},200))}blur(){document.visibilityState==="hidden"&&(document.exitPointerLock(),this.uncapture())}uncapture(){console.debug("uncapture: ",document.pointerLockElement,this.container),console.debug("uncapture: ",document.pointerLockElement!==this.container),document.pointerLockElement!==this.container&&(this.isCapture=!1),this.clickable=!1}mouseDown(t){t.preventDefault(),this.clickable&&(t.button===0&&(this.left=!0),t.button===2&&(this.right=!0))}mouseUp(t){t.preventDefault(),t.button===0&&(this.left=!1),t.button===2&&(this.right=!1)}move(t){t.preventDefault(),this.isCapture&&(this.ratio=this.canvas.width/this.container.clientWidth,this.x+=t.layerX-this.prevX,this.y+=t.layerY-this.prevY,this.prevX=t.layerX,this.prevY=t.layerY,this.x+=t.movementX*this.ratio,this.y+=t.movementY*this.ratio,this.x<0&&(this.x=0),this.y<0&&(this.y=0),this.x>this.canvas.width&&(this.x=this.canvas.width),this.y>this.canvas.height&&(this.y=this.canvas.height))}draw(){window.$game.ctx.drawImage(window.$game.textureManager.getTexture("cursor"),12,9,16,22,this.x-4,this.y-5,16,22)}get position(){return new Vector(this.x,this.y)}}class M{status;KEYMAP=new Map([["ShiftLeft","LShift"],["ShiftRight","RShift"],["ControlLeft","LCtrl"],["ControlRight","RCtrl"],["AltLeft","LAlt"],["AltRight","RAlt"],["MetaLeft","LWin"],["MetaRight","RWin"],["Escape","Esc"],["F1","F1"],["F2","F2"],["F3","F3"],["F4","F4"],["F5","F5"],["F6","F6"],["F7","F7"],["F8","F8"],["F9","F9"],["F10","F10"],["F11","F11"],["F12","F12"],["Digit0","0"],["Digit1","1"],["Digit2","2"],["Digit3","3"],["Digit4","4"],["Digit5","5"],["Digit6","6"],["Digit7","7"],["Digit8","8"],["Digit9","9"],["KeyA","A"],["KeyB","B"],["KeyC","C"],["KeyD","D"],["KeyE","E"],["KeyF","F"],["KeyG","G"],["KeyH","H"],["KeyI","I"],["KeyJ","J"],["KeyK","K"],["KeyL","L"],["KeyM","M"],["KeyN","N"],["KeyO","O"],["KeyP","P"],["KeyQ","Q"],["KeyR","R"],["KeyS","S"],["KeyT","T"],["KeyU","U"],["KeyV","V"],["KeyW","W"],["KeyX","X"],["KeyY","Y"],["KeyZ","Z"],["ArrowUp","Up"],["ArrowDown","Down"],["ArrowLeft","Left"],["ArrowRight","Right"],["Home","Home"],["End","End"],["PageUp","Page Up"],["PageDown","Page Down"],["Enter","Enter"],["Space","Space"],["Backspace","Backspace"],["Tab","Tab"],["Delete","Delete"],["Insert","Insert"],["CapsLock","Caps Lock"],["NumLock","Num Lock"],["ScrollLock","Scroll Lock"],["Pause","Pause"],["PrintScreen","Print Screen"],["Numpad0","NUMPAD0"],["Numpad1","NUMPAD1"],["Numpad2","NUMPAD2"],["Numpad3","NUMPAD3"],["Numpad4","NUMPAD4"],["Numpad5","NUMPAD5"],["Numpad6","NUMPAD6"],["Numpad7","NUMPAD7"],["Numpad8","NUMPAD8"],["Numpad9","NUMPAD9"],["NumpadMultiply","Mul"],["NumpadAdd","Add"],["NumpadSubtract","Sub"],["NumpadDecimal","Dec"],["NumpadDivide","Div"],["ContextMenu","Apps"],["Help","Help"]]);constructor(){this.status=new Map,this.KEYMAP.forEach((t,e)=>{this.status.set(t,!1)}),document.addEventListener("keydown",t=>{const e=this.KEYMAP.get(t.code);this.status.has(e)&&this.status.set(e,!0)}),document.addEventListener("keyup",t=>{const e=this.KEYMAP.get(t.code);this.status.has(e)&&this.status.set(e,!1)}),addEventListener("keydown",t=>{t.preventDefault()})}isKeyDown(t){return this.status.get(t)||!1}isKeysDown(t){let e=!1;return t.forEach(i=>{e=e||this.isKeyDown(i)}),e}}class S{constructor(t){this.keyboard=new M,this.mouse=new k(document.querySelector("#game-container"),t),this.keyPrevState=new Map,this.keyCurrState=new Map}update(){[...this.keyboard.KEYMAP.values(),"ClickLeft","ClickRight"].forEach(e=>{this.keyPrevState.set(e,this.keyCurrState.get(e)||!1),this.keyCurrState.set(e,this.isKeyDown(e))})}isKeyDown(t){return t==="ClickLeft"?this.mouse.left:t==="ClickRight"?this.mouse.right:this.keyboard.isKeyDown(t)}isKeysDown(t){return t.some(e=>this.isKeyDown(e))}isAllKeysDown(t){return t.every(e=>this.isKeyDown(e))}isFirstDown(t){return this.keyCurrState.get(t)&&!this.keyPrevState.get(t)}isHeld(t){return this.keyCurrState.get(t)}isReleased(t){return!this.keyCurrState.get(t)&&this.keyPrevState.get(t)}}class v{constructor(){}async loadJSON(t){let e=document.createElement("script");return e.src=t,await new Promise(s=>{this.resolve=s,document.getElementById("resource").appendChild(e)})}async loadImg(t){return await new Promise(i=>{let s=new Image;s.src=t,document.getElementById("resource").appendChild(s),s.onload=()=>i(s)})}}class D{constructor(){}async load(){this.tempCanvas=document.querySelector("canvas#buffer"),this.texturesURL=await window.$game.dataManager.loadJSON("assets/imgs/Textures.js"),this.textures={};let t=new Map,e=[];Object.keys(this.texturesURL).forEach(async s=>{Object.keys(this.texturesURL[s]).forEach(async a=>{e.push(this.texturesURL[s][a])})});const i=e.map(async s=>{const a=await window.$game.dataManager.loadImg(s);t.set(s,await createImageBitmap(a))});await Promise.all(i),Object.keys(this.texturesURL).forEach(async s=>{this.textures[s]={},Object.keys(this.texturesURL[s]).forEach(async a=>{this.textures[s][a]=t.get(this.texturesURL[s][a])})})}getTexture(t,e="0"){return this.textures[t]&&this.textures[t][e]?this.textures[t][e]:null}}class R{constructor(){this.backgroundMusic=null,this.init()}handleClick=()=>{};init(){document.addEventListener("click",this.handleClick)}async load(){this.sounds={},this.soundsURL=await window.$game.dataManager.loadJSON("assets/audios/Sounds.js"),Object.keys(this.soundsURL).forEach(t=>{this.sounds[t]={},Object.keys(this.soundsURL[t]).forEach(e=>{const i=new Audio(this.soundsURL[t][e]);i.loop=!1,this.sounds[t][e]=i})})}async playSound(t,e=0){const i=this.sounds[t]&&this.sounds[t][e];if(i)if(i.paused)i.play().catch(s=>{console.error(`Error playing sound: ${t+e}`,s)});else{if(t=="walk")return;const s=i.cloneNode();s.currentTime=0,s.play().catch(a=>{console.error(`Error playing sound: ${t+e}`,a)})}}}class P{constructor(){this.listeners=new Map}on(t,e){return this.listeners.has(t)||this.listeners.set(t,new Set),this.listeners.get(t).add(e),()=>this.off(t,e)}off(t,e){const i=this.listeners.get(t);i&&i.delete(e)}emit(t,e){const i=this.listeners.get(t);if(i)for(const s of[...i])try{s(e)}catch(a){console.error(`[EventBus] ${t} handler error`,a)}}}class l{constructor(t,e){this.position=t,this.size=e}add(t,e=new Vector(0,0)){return new l(t.addVector(this.position),e.addVector(this.size))}getCenter(){return this.position.addVector(this.size.scale(.5))}getTopLeft(){return this.position}getBottomRight(){return this.position.addVector(this.size)}contains(t){const e=this.getTopLeft(),i=this.getBottomRight();return t.x>=e.x&&t.x<=i.x&&t.y>=e.y&&t.y<=i.y}checkHit(t){const e=this.getTopLeft().x,i=this.getBottomRight().x,s=this.getTopLeft().y,a=this.getBottomRight().y,r=t.getTopLeft().x,c=t.getBottomRight().x,o=t.getTopLeft().y,p=t.getBottomRight().y;return!(i<=r||e>=c||s>=p||a<=o)}checkHits(t,e){for(let i of t)if(this.checkHit(i))return e(),i;return null}outofMap(){return!this.checkHit(window.$game.mapManager.mapHitbox)}merge(t){let e=new Vector(Math.min(this.position.x,t.position.x),Math.min(this.position.y,t.position.y)),i=new Vector(Math.max(this.position.x+this.size.x,t.position.x+t.size.x),Math.max(this.position.y+this.size.y,t.position.y+t.size.y));return y(e,i)}clip(t){let e=new Vector(Math.max(this.position.x,t.position.x),Math.max(this.position.y,t.position.y)),i=new Vector(Math.min(this.position.x+this.size.x,t.position.x+t.size.x),Math.min(this.position.y+this.size.y,t.position.y+t.size.y));return y(e,i)}}const y=(h,t)=>h.x>=t.x||h.y>=t.y?null:new l(h,t.subVector(h));let n=class u{constructor(t=0,e=0){this.x=t,this.y=e}copy(){return new u(this.x,this.y)}getAxis(t){return t===0?this.x:this.y}add(t,e){return new u(this.x+t,this.y+e)}addVector(t){return this.add(t.x,t.y)}sub(t,e){return this.add(-t,-e)}subVector(t){return this.sub(t.x,t.y)}addEqual(t){return this.x+=t.x,this.y+=t.y,this}subEqual(t){return this.x-=t.x,this.y-=t.y,this}scale(t){return new u(this.x*t,this.y*t)}magnitude(){return Math.sqrt(this.x**2+this.y**2)}normalize(){const t=this.magnitude();return t===0?new u(0,0):new u(this.x/t,this.y/t)}dot(t){return this.x*t.x+this.y*t.y}rotate(t){const e=Math.cos(t),i=Math.sin(t),s=this.x*e-this.y*i,a=this.x*i+this.y*e;return new u(s,a)}angle(){return Math.atan2(this.y,this.x)}round(){return new u(Math.round(this.x),Math.round(this.y))}};class C extends l{constructor(t,e,i){super(new n(t.x,t.y),new n(e.x,e.y)),this.type=i}}class T extends l{constructor(t,e,i,s,a={}){super(new n(t.x,t.y),new n(e.x,e.y)),this.type=i,this.autoTrigger=!!s,Object.assign(this,a)}}class j{constructor(){this.backgrounds=[],this.blocks=[],this.textures=[],this.interactions=[],this.mapHitBox=new l(new n(0,0),new n(1280,720))}async loadRoom(t,e){const i=`assets/stages/layer${t}/room${e}.js`;try{const s=await window.$game.dataManager.loadJSON(i);this.rawMapData=JSON.parse(JSON.stringify(s)),this.playerSpawn=s.playerSpawn?{...s.playerSpawn}:null,this.enemySpawns=Array.isArray(s.enemySpawns)?s.enemySpawns.map(o=>({...o})):[],this.backgrounds=(s.backgrounds||[]).map(o=>({...o})),this.blocks=(s.blocks||[]).map(o=>new C(o.position,o.size,o.type)),this.textures=(s.textures||[]).map(o=>({...o}));const a=(s.interactions||[]).map(o=>new T(o.position,o.size,o.type,o.autoTrigger,o));this.interactions=[...a.filter(o=>o.autoTrigger),...a.filter(o=>!o.autoTrigger)],this.blockHitboxes=this.blocks.map(o=>new l(new n(o.position.x,o.position.y),new n(o.size.x,o.size.y)));const r=this.interactions.filter(o=>o.autoTrigger),c=this.interactions.filter(o=>!o.autoTrigger);this.interactionHitboxes=[...r.map(o=>new l(new n(o.position.x,o.position.y),new n(o.size.x,o.size.y))),...c.map(o=>new l(new n(o.position.x,o.position.y),new n(o.size.x,o.size.y)))]}catch(s){console.error("MapManager.loadRoom error:",s)}}getPlayerSpawn(){return this.playerSpawn}getEnemySpawns(){return this.enemySpawns||[]}getBlockHitboxes(){return this.blocks||[]}getInteractionHitboxes(){return this.interactions||[]}draw(){const t=window.$game.ctx;for(const e of this.backgrounds)this.drawItem(t,e,"background");for(const e of this.blocks)this.drawItem(t,e,"block");for(const e of this.textures)this.drawItem(t,e,"texture")}drawItem(t,e,i){t.save();let s=null,a=i+"s";s=window.$game.textureManager.getTexture(a,e.type),s?t.drawImage(s,e.position.x,e.position.y,e.size.x,e.size.y):(i==="background"?t.fillStyle="#e0e0e0":i==="block"?t.fillStyle="#654321":i==="texture"?t.fillStyle="#8888ff":t.fillStyle="#cccccc",t.fillRect(e.position.x,e.position.y,e.size.x,e.size.y)),t.restore()}}class d{constructor(t=0){this.t=0,this.cd=t}start(){this.t=this.cd}tick(t){this.t=Math.max(0,this.t-t)}ready(){return this.t===0}reset(){this.t=0}set(t=0){this.cd=t}}class z{constructor(t,e,i,s,a){this.baseJump=t,this.maxJump=e,this.gravity=i,this.coyoteTime=s,this.jumpBuffer=new d(a),this.jumpBufferTime=a,this.isJumping=!1,this.isFalling=!1,this.jumpVelocity=0,this.chargeTime=0,this.coyoteTimer=0,this.times=1}startJump(){this.isJumping=!0,this.isFalling=!1,this.chargeTime=0,this.jumpBuffer.reset(),this.coyoteTimer=0,window.$game.soundManager.playSound(this.type,"jump")}updateJump(t,e,i){this.jumpBuffer.tick(e),i?(this.coyoteTimer=this.coyoteTime,this.isJumping=!1,this.isFalling=!1,!i&2&&(this.jumpVelocity=0),i&2?this.times=1.5:this.times=1,this.jumpBuffer.ready()||this.startJump()):(this.isJumping||(this.isFalling=!0),this.coyoteTimer=Math.max(this.coyoteTimer-e,0),!this.isJumping&&!this.jumpBuffer.ready()&&this.coyoteTimer>0&&this.startJump()),this.isJumping?!this.isFalling&&t&&this.chargeTime<this.maxJump*this.times?(this.chargeTime+=e,this.jumpVelocity=Math.min(this.baseJump+this.chargeTime/this.maxJump*this.times*(this.maxJump*this.times-this.baseJump),this.maxJump*this.times)):(this.isFalling=!0,this.updateFalling(e)):this.isFalling&&this.updateFalling(e)}updateFalling(t){this.jumpVelocity-=this.gravity*t,this.jumpVelocity=Math.max(-6*this.baseJump,this.jumpVelocity)}}class m{constructor(t,e,i=new n){this.type="",this.velocity=i,this.hitbox=new l(t,e),this.jumping=new z(4,9,.5,8,15),this.MaxSpeed=6,this.attackBox=null,this.hurtBox=null}getCenter(){return this.hitbox.getCenter()}isOnGround(){if(this.velocity.y<0)return!1;this.hitbox.position.y+=1;let t=!1;if(window.$game&&window.$game.mapManager){const e=window.$game.mapManager.getBlockHitboxes();t=!!this.hitbox.checkHits(e,()=>{})}return this.hitbox.position.y-=1,t&&(this.isflying=0),t}rigidMove(t){let e=this.velocity.scale(t).round(),i=0,s=window.$game.mapManager.getBlockHitboxes();for(let a=0;a<Math.abs(e.x);++a)if(this.hitbox.position.x+=Math.sign(e.x),this.hitbox.checkHits(s,()=>{this.hitbox.position.x-=Math.sign(e.x)})){i|=1;break}for(let a=0;a<Math.abs(e.y);++a)if(this.hitbox.position.y+=Math.sign(e.y),this.hitbox.checkHits(s,()=>{this.hitbox.position.y-=Math.sign(e.y)})){i|=2;break}return i}updateY(t,e){this.jumping.updateJump(e,t,this.isOnGround())}updateX(t,e){const i=this.isOnGround();let s=this.velocity.x;if(i){if(e===0)s*=Math.exp(-.5*t);else{const a=10*t;s=e*Math.min(Math.sqrt(this.velocity.x*this.velocity.x+a),this.MaxSpeed)}e&&window.$game.soundManager.playSound(this.type,"walk")}else{const a=.3*t;e!==0?(s+=a*(e*this.MaxSpeed-this.velocity.x),Math.abs(s)>this.MaxSpeed&&(s=this.MaxSpeed*Math.sign(s))):s*=Math.exp(-.05*t)}return s}updateXY(t,e,i){this.updateY(t,i()),this.velocity.y=-this.jumping.jumpVelocity,this.velocity.x=this.updateX(t,e());let s=this.rigidMove(t);s&1&&(this.velocity.x=0),s&2&&(this.velocity.y=this.jumping.jumpVelocity=0)}update(t){t=60*t/1e3,this.updateXY(t,()=>0,()=>0)}draw(){window.$game.ctx.fillStyle="rgba(221, 100, 0, 1)",window.$game.ctx.fillRect(this.hitbox.position.x,this.hitbox.position.y,this.hitbox.size.x,this.hitbox.size.y)}}class B extends m{constructor(t,e,i,s,a=new n(10,10)){super(t,a,e),this.type="projectile",this.damage=i,this.alive=!0,this.hurtBox=this.hitbox,this.targetSelector=s,window.$game.projectilesManager.add(this)}update(t){if(!this.alive)return;const e=60*t/1e3;if(this.rigidMove(e)){this.alive=!1;return}this.targetSelector().forEach(s=>{this.hurtBox.checkHit(s.hurtBox)&&(s.takeDamage(this.damage),this.alive=!1)})}draw(t){this.alive&&(t.fillStyle="yellow",t.fillRect(this.hitbox.position.x,this.hitbox.position.y,this.hitbox.size.x,this.hitbox.size.y))}}class ${constructor(){this.projectiles=[]}add(t){this.projectiles.push(t)}update(t){this.projectiles.forEach(e=>e.update(t)),this.projectiles=this.projectiles.filter(e=>e.alive)}draw(t){this.projectiles.forEach(e=>e.draw(t))}clear(){this.projectiles.length=0}}class f{constructor(t,e){this.owner=t,this.type=e,this.state="idle",this.timer=0}get damage(){return this.owner.state.attack.damage[this.type]}get startupTime(){return this.owner.state.attack.startupTime[this.type]}get recoveryTime(){return this.owner.state.attack.recoveryTime[this.type]}get targetSelector(){return this.owner.attack.targetSelector}trigger(){return this.state==="idle"?(this.state="startup",this.timer=this.startupTime,!0):!1}update(t){if(this.state!=="idle"&&(this.timer-=t,!(this.timer>0)))switch(this.state){case"startup":this.enterActive();break;case"active":this.enterRecovery();break;case"recovery":this.state="idle";break}}enterActive(){this.state="active",window.$game.soundManager.playSound(this.owner.type,this.type+"Attack"),this.onHit(this.owner,this.damage)}enterRecovery(){this.state="recovery",this.timer=this.recoveryTime}onHit(t,e){}}class w extends f{constructor(t){super(t,"melee")}onHit(t,e){const s=t.facing>0?t.hitbox.size.x/2:-t.hitbox.size.x/2,a=t.hitbox.position.addVector(new n(s,t.hitbox.size.y*.25)),r=new n(t.hitbox.size.x*.8,t.hitbox.size.y*.5),c=new l(a,r);this.targetSelector().forEach(o=>{c.checkHit(o.hurtBox)&&o.takeDamage(e)})}}class L extends f{constructor(t){super(t,"ranged")}onHit(t,e){const s=t.facing,a=t.hitbox.getCenter();new B(a,new n(12*s,0),e,this.targetSelector)}}class H{static Framerate={run:6,jump:30,fall:30,stand:8};static Frames={run:6,jump:4,fall:2,stand:7};constructor(){this.status="run",this.facing=1,this.frame=1,this.frameRun=0}setStatus(t,e){(t!=this.status||e!=this.facing)&&(this.frame=1,this.frameRun=0,this.status=t,this.facing=e)}update(t){}getFrame(){return window.$game.textureManager.getTexture("player",0)}}class E extends m{constructor(t,e=new n(50,50),i=new n){super(t,e,i),this.size=e,this.type="player",this.jumping.type="player",this.baseState={hp_max:100,attack_baseDamage:10,attack_baseMeleeStartupTime:50,attack_baseMeleeRecoveryTime:900,attack_baseRangedStartupTime:150,attack_baseRangedRecoveryTime:700,dash_cooldownTime:600,dash_maxCount:1,items:[]},this.state={hp:this.baseState.hp_max,hp_max:this.baseState.hp_max,attack:{damage:{melee:this.baseState.attack_baseDamage,ranged:this.baseState.attack_baseDamage},startupTime:{melee:this.baseState.attack_baseMeleeStartupTime,ranged:this.baseState.attack_baseRangedStartupTime},recoveryTime:{melee:this.baseState.attack_baseMeleeRecoveryTime,ranged:this.baseState.attack_baseRangedStartupTime}}},this.attack={targetSelector:()=>window.$game.enemies,melee:new w(this),ranged:new L(this)},this.facing=1,this.animation=new H,this.initDash(),this.hurtBox=this.hitbox,this.invulnerableCooldown=new d(100),this.controllerX=()=>{if(this.blockMove)return 0;let s=window.$game.inputManager.isKeysDown(["A","Left"]),a=window.$game.inputManager.isKeysDown(["D","Right"]),r=0;return s&&a?r=0:s?this.facing=r=-1:a&&(this.facing=r=1),r},this.controllerY=()=>this.blockMove?0:(window.$game.inputManager.isFirstDown("Space")&&this.jumping.jumpBuffer.start(),window.$game.inputManager.isHeld("Space"))}async update(t){this.invulnerableCooldown.tick(t),window.$game.inputManager.isKeyDown("J")&&this.attack.melee.trigger(),window.$game.inputManager.isKeyDown("L")&&this.attack.ranged.trigger(),this.attack.melee.update(t),this.attack.ranged.update(t),this.dash.update(t);const e=60*t/1e3;this.updateXY(e,this.controllerX(),this.controllerY()),this.jumping.jumpVelocity>0?this.animation.setStatus("jump",this.facing):this.isOnGround()?this.animation.setStatus("stand",this.facing):(window.$game.statistics.jumpTime+=t,this.jumping.jumpVelocity<0&&this.animation.setStatus("fall",this.facing)),this.animation.update(e)}updateXY(t,e,i){this.dash.isDashing||(this.updateY(t,i),this.velocity.y=-this.jumping.jumpVelocity,this.velocity.x=this.updateX(t,e));let s=this.rigidMove(t);s&1&&(this.velocity.x=0,this.dash.isDashing=0),s&2&&(this.velocity.y=this.jumping.jumpVelocity=0)}initDash(){this.dash={isDashing:!1,dashDuration:200,dashCooldownTime:this.baseState.dash_cooldownTime,dashSpeed:15,dashDir:{x:1,y:0},dashDurationCooldown:null,dashCooldown:null,dashMaxCount:this.baseState.dash_maxCount,dashCount:0,update:null},this.dash.dashDurationCooldown=new d(this.dash.dashDuration),this.dash.dashCooldown=new d(this.dash.dashCooldownTime),this.dash.update=t=>{this.isOnGround()&&(this.dash.dashCooldown.tick(t),this.dash.dashCooldown.ready()&&this.dash.dashCount<this.dash.dashMaxCount&&(this.dash.dashCount++,this.dash.dashCooldown.start()));let e=0,i=0;if(window.$game.inputManager.isKeysDown(["A","Left"])&&(e-=1),window.$game.inputManager.isKeysDown(["D","Right"])&&(e+=1),window.$game.inputManager.isKeysDown(["W","Up"])&&(i-=1),window.$game.inputManager.isKeysDown(["S","Down"])&&(i+=1),!this.dash.isDashing&&this.dash.dashCount>0&&window.$game.inputManager.isKeyDown("K")){e===0&&i===0&&(e=this.facing);let s=Math.sqrt(e*e+i*i);s===0&&(s=1),this.dash.dashDir={x:e/s,y:i/s},this.dash.isDashing=!0,this.dash.dashDurationCooldown.start(),this.dash.dashCount--,window.$game.soundManager.playSound("player","dash")}this.dash.isDashing&&(this.dash.dashDurationCooldown.tick(t),this.velocity.x=this.dash.dashSpeed*this.dash.dashDir.x,this.velocity.y=this.dash.dashSpeed*this.dash.dashDir.y,this.dash.dashDurationCooldown.ready()&&(this.dash.isDashing=!1,this.jumping.jumpVelocity=-this.velocity.y))}}takeDamage(t){this.invulnerableCooldown.ready()&&(this.state.hp-=t,this.invulnerableCooldown.start(),this.state.hp<=0&&(window.$game.bus.emit("player.die"),alert("你死了")))}setPosition(t){this.hitbox.position=t}draw(){const t=window.$game.ctx;t.drawImage(this.animation.getFrame(),this.hitbox.position.x,this.hitbox.position.y,this.size.x,this.size.y);const e=this.size.x,i=6,s=this.hitbox.position.x,a=this.hitbox.position.y-12;t.save(),t.fillStyle="red",t.fillRect(s,a,e,i),t.fillStyle="green";const r=Math.max(this.state.hp,0)/this.state.hp_max,c=e*r;t.fillRect(s,a,c,i),t.strokeStyle="black",t.strokeRect(s,a,e,i),t.restore(),this.drawDashUI(t)}drawBoxs(t){t.strokeStyle=this.isInvulnerable?"#cccccc":"#00aaff",t.strokeRect(this.hitbox.position.x,this.hitbox.position.y,this.hitbox.size.x,this.hitbox.size.y),t.strokeStyle="#ff0000";const e=.5*(this.facing>=0?this.hitbox.size.x:-this.hitbox.size.x),i=this.hitbox.position.addVector(new n(e,this.hitbox.size.y*.2)),s=new n(this.hitbox.size.x*.8,this.hitbox.size.y*.5);t.strokeRect(i.x,i.y,s.x,s.y),t.restore()}drawDashUI(t){const e=this.dash.dashMaxCount,i=this.dash.dashCount,s=8,a=4,r=this.hitbox.position.x+this.size.x/2-(e*(s+a)-a)/2,c=this.hitbox.position.y-24;for(let o=0;o<e;o++)t.fillStyle=o<i?"cyan":"gray",t.fillRect(r+o*(s+a),c,s,s),t.strokeStyle="black",t.strokeRect(r+o*(s+a),c,s,s)}}class F{static Framerate={run:6,jump:30,fall:30,stand:8};static Frames={run:6,jump:4,fall:2,stand:7};constructor(){this.status="run",this.facing=1,this.frame=1,this.frameRun=0}setStatus(t,e){(t!=this.status||e!=this.facing)&&(this.frame=1,this.frameRun=0,this.status=t,this.facing=e)}update(t){}getFrame(){return window.$game.textureManager.getTexture("enemy",0)}}class K extends m{constructor(t,e,i=new n(50,50),s=new n){super(e,i,s),this.Size=i,this.type="enemy"+t,this.baseState={hp_max:100,attack_baseDamage:10,attack_baseMeleeStartupTime:50,attack_baseMeleeRecoveryTime:900,attack_baseRangedStartupTime:150,attack_baseRangedRecoveryTime:700,items:[]},this.state={hp:this.baseState.hp_max,hp_max:this.baseState.hp_max,attack:{damage:{melee:this.baseState.attack_baseDamage,ranged:this.baseState.attack_baseDamage},startupTime:{melee:this.baseState.attack_baseMeleeStartupTime,ranged:this.baseState.attack_baseRangedStartupTime},recoveryTime:{melee:this.baseState.attack_baseMeleeRecoveryTime,ranged:this.baseState.attack_baseRangedStartupTime}}},this.facing=1,this.animation=new F,this.attack={melee:new w(this),targetSelector:()=>[window.$game.player]},this.hurtBox=this.hitbox,this.invulnerableCooldown=new d(100),this._unbind_list=[]}async update(t){this.invulnerableCooldown.tick(t);const e=Math.abs(this.hitbox.getCenter().x-window.$game.player.hitbox.getCenter().x),i=this.hitbox.getCenter().y-window.$game.player.hitbox.getCenter().y;let s=!1,a="patrol";i>50?e<400&&Math.abs(i)<100&&(a="seek_path",this.hasDirectPathToPlayer()&&(s=Math.random()<.2)):i<-50?e<300&&Math.abs(i)<80&&(a="wait",this.hasSafeDropPath()&&(s=Math.random()<.3)):e<400&&Math.abs(i)<60&&(a="attack",s=Math.random()<.4),s&&this.attack.melee.trigger(),this.attack.melee.update(t),this.updateMovementByMode(a,e,i);const r=60*t/1e3;let c=0;this.updateXY(r,()=>{if(this.blockMove)return 0;if(c=0,a==="attack"||a==="seek_path")this.hitbox.position.x<window.$game.player.hitbox.position.x?this.facing=c=1:this.facing=c=-1,c*=.3;else if(a==="wait")c=0;else{Math.random()<.002&&(this.facing=Math.random()<.5?1:-1);const o=this.hitbox.position.x+this.facing*2,p=new l(new n(o,this.hitbox.position.y),this.hitbox.size),x=window.$game.mapManager.getBlockHitboxes();let g=!1;for(const b of x)if(p.checkHit(b)){g=!0;break}(g||o<0||o>1280)&&(this.facing=-this.facing),c=this.facing*.2}return c},()=>{if(this.blockMove||!(a==="attack"||a==="seek_path"))return 0},!0),this.jumping.jumpVelocity>0?this.animation.setStatus("jump",this.facing):this.isOnGround()?c?this.animation.setStatus("run",this.facing):this.animation.setStatus("stand",this.facing):(window.$game.statistics.jumpTime+=t,this.jumping.jumpVelocity<0&&this.animation.setStatus("fall",this.facing)),this.animation.update(r)}hasDirectPathToPlayer(){const t=window.$game.player.hitbox.position,e=this.hitbox.position,i=window.$game.mapManager.getBlockHitboxes(),s=new l(new n(Math.min(e.x,t.x),Math.min(e.y,t.y)),new n(Math.abs(t.x-e.x),Math.abs(t.y-e.y)));for(const a of i)if(s.checkHit(a))return!1;return!0}hasSafeDropPath(){window.$game.player.hitbox.position;const t=this.hitbox.position,e=window.$game.mapManager.getBlockHitboxes(),i=t.y+100,s=new l(new n(t.x,t.y),new n(this.hitbox.size.x,i-t.y));for(const a of e)if(s.checkHit(a))return!0;return!1}updateMovementByMode(t,e,i){switch(t){case"seek_path":this.seekVerticalPath();break;case"wait":this.waitForPlayer();break;case"attack":this.normalMovement();break;case"patrol":default:this.patrolMovement();break}}seekVerticalPath(){const t=window.$game.player.hitbox.position,e=this.hitbox.position,i=window.$game.mapManager.getBlockHitboxes();let s=null,a=1/0;for(const r of i)if(r.position.y<e.y&&r.position.y>t.y-50){const c=Math.abs(r.position.x-e.x);c<a&&(a=c,s=r)}s?this.moveToTarget(s):this.wait()}waitForPlayer(){this.hasSafeDropPath()?this.seekDropPoint():this.patrolMovement()}normalMovement(){}patrolMovement(){Math.random()<.02&&(this.facing=Math.random()<.5?1:-1);const t=this.hitbox.position.x+this.facing*2,e=new l(new n(t,this.hitbox.position.y),this.hitbox.size),i=window.$game.mapManager.getBlockHitboxes();let s=!1;for(const a of i)if(e.checkHit(a)){s=!0;break}(s||t<0||t>1280)&&(this.facing=-this.facing)}moveToTarget(t){const e=t.position,i=this.hitbox.position;e.x>i.x?this.facing=1:e.x<i.x&&(this.facing=-1),e.y<i.y&&this.isOnGround()&&this.jumping.jumpBuffer.start()}seekDropPoint(){const t=window.$game.player.hitbox.position,e=this.hitbox.position,i=window.$game.mapManager.getBlockHitboxes();let s=null,a=1/0;for(const r of i)if(r.position.y>e.y&&r.position.y<t.y+50){const c=Math.abs(r.position.x-e.x);c<a&&(a=c,s=r)}s&&this.moveToTarget(s)}wait(){}takeDamage(t){if(this.invulnerableCooldown.ready()&&(this.state.hp-=t,this.invulnerableCooldown.start(),this.state.hp<=0)){this._unbind_list.forEach(i=>i()),this._unbind_list=[];const e=window.$game.enemies.indexOf(this);e!==-1&&window.$game.enemies.splice(e,1)}}draw(){const t=window.$game.ctx;t.drawImage(this.animation.getFrame(),this.hitbox.position.x,this.hitbox.position.y,this.Size.x,this.Size.y);const e=this.Size.x,i=6,s=this.hitbox.position.x,a=this.hitbox.position.y-12;t.save(),t.fillStyle="red",t.fillRect(s,a,e,i),t.fillStyle="green";const r=Math.max(this.state.hp,0)/this.state.hp_max,c=e*r;t.fillRect(s,a,c,i),t.strokeStyle="black",t.strokeRect(s,a,e,i),t.restore()}drawBoxs(t){t.strokeStyle=this.isInvulnerable?"#cccccc":"#00aaff",t.strokeRect(this.hitbox.position.x,this.hitbox.position.y,this.hitbox.size.x,this.hitbox.size.y),t.strokeStyle="#ff0000";const e=.5*(this.facing>=0?this.hitbox.size.x:-this.hitbox.size.x),i=this.hitbox.position.addVector(new n(e,this.hitbox.size.y*.25)),s=new n(this.hitbox.size.x*.8,this.hitbox.size.y*.5);t.strokeRect(i.x,i.y,s.x,s.y),t.restore()}}class A{constructor(){window.$game=this,this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d"),this.inputManager=new S(this.canvas),this.dataManager=new v,this.textureManager=new D,this.soundManager=new R,this.bus=new P,this.mapManager=new j,this.projectilesManager=new $,this.player=new E(new n(100,100)),this.stop=!1,this.isPaused=!1,this.lastTime=0;const t=60;this.targetFrameTime=1e3/t,this.loop=this.loop.bind(this),this.statistics={portal:0,bullet:0,restart:0,jump:0,jumpTime:0}}async init(){await this.textureManager.load(),await this.soundManager.load(),await this.mapManager.loadRoom(1,1);const t=this.mapManager.getPlayerSpawn();this.player.setPosition(new n(t.x,t.y)),this.bus.on("tick",({deltaTime:i})=>{this.inputManager.update(),this.player.update(i),this.enemies.forEach(s=>s.update(i)),this.projectilesManager.update(i)}),this.bus.on("tick_draw",()=>{const i=this.ctx;i.clearRect(0,0,this.canvas.width,this.canvas.height),this.mapManager.draw(),this.player.draw(),this.enemies.forEach(s=>s.draw()),this.projectilesManager.draw(i)});const e=this.mapManager.getEnemySpawns();if(this.enemies=[],Array.isArray(e))for(const i of e)this.enemies.push(new K(i.type,new n(i.x,i.y)))}start(t=0){this.loop(0)}loop(t){const e=t-this.lastTime;e>=this.targetFrameTime&&(this.bus.emit("tick",{deltaTime:e}),this.bus.emit("tick_draw"),this.lastTime=t-e%this.targetFrameTime),requestAnimationFrame(this.loop)}}window.onload=()=>{const h=new A;h.init().then(()=>{h.start()})};
